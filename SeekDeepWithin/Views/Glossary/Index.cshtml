@model SeekDeepWithin.Models.GlossaryIndexViewModel

@{
   ViewBag.Title = "Glossary";
   const int perColumn = 25;
   var totalItems = Model.Terms.Count;
   var start = 0;
   var startChar = ' ';
   var scheme = Request.Url == null ? string.Empty : Request.Url.Scheme;
}
@section featured {
   <div class="panel">
      <div class="row">
         <div class="small-12 columns">
            <h3>
               @if (string.IsNullOrWhiteSpace (Model.SourceName)) {
                  <i class="icon-list mRight"></i> <text>Glossary</text>
                  if (Request.IsAuthenticated && User.IsInRole ("Creator")) {
                     <small style="float: right">
                        <a href="@Url.Action("Create", "Term", null, scheme)" class="sdw-button add tiny">
                           <i class="icon-plus"></i> new term
                        </a>
                     </small>
                  }
               } else {
                  <i class="icon-list mRight"></i> <text>@Model.SourceName</text>
               }
            </h3>
         </div>
      </div>
   </div>
}
<div class="footer-box">
   showing @(Model.Terms.Start) - @(Model.Terms.End) of @(Model.Terms.TotalHits) total
</div>
<div class="row">
   @for (var a = 0; a < 3; a++) {
      var sHead = true;
      var max = Math.Min (start + perColumn, totalItems);
      <div class="small-12 large-4 columns">
         @if (start < max) {
            <div class="sdw-panel">
               @{
                  for (int b = start; b < max; b++) {
                     var item = Model.Terms[b];
                     if (item.Name [0] != startChar || b == start) {
                        startChar = item.Name [0];
                        <div class="title" @if(!sHead){<text>style="border-top: solid 1px #c7c7c7"</text>}>@Char.ToUpper(startChar)</div>
                     }
                     sHead = false;
                     <a href="@Url.Action("Index", "Term", new {id = item.Id}, scheme)" class="sdw-button white expand">
                        @(item.Name)
                     </a>
                  }
                  start += perColumn;
               }
            </div>
         }
      </div>
   }
   @if (Model.Terms.TotalPages > 1) {
      <div class="row">
         <div class="small-12 large-12 columns">
            @if (Model.Terms.TotalHits > Model.Terms.Count) {
               var startPage = 1;
               var endPage = Model.Terms.TotalPages;
               if (Model.Terms.TotalPages > 12) {
                  if (Model.Terms.PageNumber > 6) {
                     startPage = Model.Terms.PageNumber - 5;
                  }
                  endPage = Math.Min (Model.Terms.TotalPages, startPage + 11);
               }
               <div class="pagination">
                  @if (startPage != 1) {
                     <a href="@Url.Action("Index", "Glossary", new {page = startPage - 1, sourceId = Model.SourceId}, scheme)" class="page">
                        &larr;
                     </a>
                  }
                  @for (int a = startPage; a <= endPage; a++) {
                     if (a == Model.Terms.PageNumber) {
                        <span class="page active">@(a)</span>
                     } else {
                        <a href="@Url.Action("Index", "Glossary", new {page = a, sourceId = Model.SourceId}, scheme)" class="page">
                           @(a)
                        </a>
                     }
                  }
                  @if (endPage < Model.Terms.TotalPages) {
                     <a href="@Url.Action("Index", "Glossary", new {page = endPage + 1, sourceId = Model.SourceId}, scheme)" class="page">
                        &rarr;
                     </a>
                  }
                  @(Model.Terms.TotalPages) pages total
               </div>
            }
         </div>
      </div>
   }
</div>