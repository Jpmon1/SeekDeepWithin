@using PagedList.Mvc;
@model SeekDeepWithin.Models.GlossaryIndexViewModel

@{
   ViewBag.Title = "Glossary";
   const int perColumn = 25;
   var totalItems = Model.Terms.Count;
   var start = 0;
   var startChar = ' ';
}
<h3>
   @if (string.IsNullOrWhiteSpace (Model.SourceName)) {
      <text>Glossary</text>
      if (Request.IsAuthenticated && User.IsInRole ("Creator")) {
         <span style="font-size: small">
            <a href="@Url.Action("Create", "Term", null, Request.Url.Scheme)">new term</a>
         </span>
      }
   } else {
      <text>@Model.SourceName</text>
   }
</h3>
<div class="row">
   @for (var a = 0; a < 3; a++) {
      var max = Math.Min (start + perColumn, totalItems);
      <div class="small-12 large-4 columns">
         @if (start < max) {
            <ul class="pricing-table">
               @{
                  for (int b = start; b < max; b++) {
                     var item = Model.Terms[b];
                     if (item.Name [0] != startChar || b == start) {
                        startChar = item.Name [0];
                        <li class="title">@Char.ToUpper(startChar)</li>
                     }
                     <li class="bullet-item"><a href="@Url.Action("Index", "Term", new {id = item.Id}, Request.Url.Scheme)">@item.Name</a></li>
                  }
                  Html.Raw ("</ul>");
                  start += perColumn;
               }
            </ul>
         }
      </div>
   }
   @if (Model.Terms.PageCount > 1) {
      <div class="row">
         <div class="small-12 large-12 columns">
            Page @(Model.Terms.PageCount < Model.Terms.PageNumber ? 0 : Model.Terms.PageNumber) of @Model.Terms.PageCount
            @Html.PagedListPager(Model.Terms, page => Url.Action ("Index", new { page }))
         </div>
      </div>
   }
</div>